# ==================== ID 1 ====================
public class ActionGroup implements Serializable {
  private static final long serialVersionUID = -506579454933806376L;

  private Integer id;
}

# ==================== ID 2 ====================
public class UnrecoverableCollectionException extends RuntimeException {
  private static final long serialVersionUID = 1L;

  public UnrecoverableCollectionException(Throwable t) {
    super(t);
  }
}

# ==================== ID 3 ====================
public class Perfil {

  public String local;
  public String idade;
  public String nascimento;
  public String escola;

  public String getLocal() {
    return local;
  }

  public void setLocal(String local) {
    this.local = local;
  }

  public String getIdade() {
    return idade;
  }

  public void setIdade(String idade) {
    this.idade = idade;
  }

  public String getNascimento() {
    return nascimento;
  }

  public void setNascimento(String nascimento) {
    this.nascimento = nascimento;
  }

  public String getEscola() {
    return escola;
  }

  public void setEscola(String escola) {
    this.escola = escola;
  }
}

# ==================== ID 4 ====================
public class HtmlEntity {
  public static String convert(String inputText) {
    StringBuilder buf = new StringBuilder(inputText.length());
    CharsetEncoder encoder = Charset.forName("us-ascii").newEncoder();
    for (int idx = 0; idx < inputText.length(); ++idx) {
      char ch = inputText.charAt(idx);
      if (encoder.canEncode(ch)) buf.append(ch);
      else {
        buf.append("&#");
        buf.append((int) ch);
        buf.append(';');
      }
    }
    String result = buf.toString();
    return result;
  }
}

# ==================== ID 5 ====================
public class RaceTime {
  public final int laps;
  public final int ticks;
  public final int millis;

  public RaceTime(int laps, int ticks, int millis) {
    this.laps = laps;
    this.ticks = ticks;
    this.millis = millis;
  }
}

# ==================== ID 6 ====================
public class ApiUrl {

  public static final String DEV_BASE_URL = "";
  public static final String ONLINE_URL = "http://cps.gnete.com/appRevServer";

  public static String getAbsoluteUrl(String relativeUrl) {
    String url = ONLINE_URL + relativeUrl;
    return url;
  }

  public static final String LOGIN = "user/login";
}

# ==================== ID 7 ====================
public class AppArguments {
  Map<String, String> arguments;

  public AppArguments(String[] arguments) {
    this.arguments = new HashMap<String, String>();
    for (int i = 0; i + 1 < arguments.length; i = i + 2) {
      String key = arguments[i];
      String value = arguments[i + 1];
      this.arguments.put(key, value);
    }
  }

  public String getOrDefault(String key, String defaultValue) {
    return arguments.getOrDefault(key, defaultValue);
  }

  public String get(String key) {
    return arguments.get(key);
  }

  public int size() {
    return arguments.size();
  }
}

# ==================== ID 8 ====================
public class ChainingReader extends Reader {
  List<Reader> _readers = new LinkedList<Reader>();

  public void addReader(Reader reader) {
    _readers.add(reader);
  }

  @Override
  public void close() throws IOException {
    for (Reader reader : _readers) {
      try {
        reader.close();
      } catch (IOException e) {
      }
    }
  }

  @Override
  public int read(char[] cbuf, int off, int len) throws IOException {
    int c = -1;
    while (_readers.size() > 0) {
      c = _readers.get(0).read(cbuf, off, len);
      if (c <= 0) {
        _readers.remove(0).close();
      } else {
        break;
      }
    }
    return c;
  }
}

# ==================== ID 9 ====================
public class Constants {
  public static final double eps_g_1990 = 279.403303;
  public static final double omega_g_1990 = 282.768422;
  public static final double e_earth = 0.016713;
}

# ==================== ID 10 ====================
public class Roles {

  private String id;
  private String roleName;

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public String getRoleName() {
    return roleName;
  }

  public void setRoleName(String roleName) {
    this.roleName = roleName;
  }

  @Override
  public String toString() {
    return "Roles [id=" + id + ", roleName=" + roleName + "]";
  }
}

# ==================== ID 11 ====================
public class MessageUtils {
  public static String msgEncrypt(String msgSignature, String timestamp, String nonce) {
    return "<xml><Encrypt><![CDATA[msg_encrypt]]></Encrypt><MsgSignature><![CDATA["
        + msgSignature
        + "]]></MsgSignature><TimeStamp>"
        + timestamp
        + "</TimeStamp><Nonce><![CDATA["
        + nonce
        + "]]></Nonce></xml>";
  }
}

# ==================== ID 12 ====================
public class BinarySearch {

  public static int findIndex(int key, int[] elements) {
    int low = 0;
    int high = elements.length - 1;

    int mid = (low + high) / 2;
    if (key == elements[mid]) {
      return mid;
    }

    return -1;
  }
}

# ==================== ID 13 ====================
public class IPv4 implements Serializable {

  private final String address;

  public IPv4(String address) {
    this.address = address;
  }

  public String getAddress() {
    return address;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    return Objects.equals(address, IPv4.class.cast(o).address);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address);
  }

  public InetAddress toInetAddress() {
    try {
      String host = address.replaceAll("\\/.*$", "");
      return Inet4Address.getByName(host);
    } catch (UnknownHostException e) {
      throw new IllegalStateException(e);
    }
  }
}

# ==================== ID 14 ====================
public class EnumReader {
  public static <T extends Enum<T>> T parse(String name, Class<T> enumeration) {

    for (T enumValue : enumeration.getEnumConstants()) {
      if (enumValue.name().equalsIgnoreCase(name)) {
        return enumValue;
      }
    }

    throw new IllegalArgumentException(
        String.format("There is no value with name '%s' in Enum %s", name, enumeration.getName()));
  }
}

# ==================== ID 15 ====================
public class Semaphore {

  private int count;

  public Semaphore(int count) {
    this.count = count;
  }

  public synchronized void P() {
    count--;
    if (count == 0) {
      try {
        wait();
      } catch (InterruptedException e) {
        e.printStackTrace();
        Thread.currentThread().interrupt();
      }
    }
  }

  public synchronized void V() {
    count++;
    if (count <= 0) {
      notifyAll();
    }
  }
}

# ==================== ID 16 ====================
public class FilenameExtensions {

  public static String contentsOfEntireFile(File file) {
    byte[] encoded;
    try {
      encoded = Files.readAllBytes(file.toPath());
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
    return StandardCharsets.UTF_8.decode(ByteBuffer.wrap(encoded)).toString();
  }

  public static String contentsFrom_to_(File asFile, int start, int stop) {
    return null;
  }
}

# ==================== ID 17 ====================
class HtmlWriter {
  private Writer writer;

  public HtmlWriter(Writer writer) {
    this.writer = writer;
  }

  public void title(String title) throws IOException {
    writer.write("<html>");
    writer.write("<head>");
    writer.write("<title>" + title + "</title>");
    writer.write("</head>");
    writer.write("<body>");
    writer.write("<h1>" + title + "</h1>");
  }

  public void paragraph(String msg) throws IOException {
    writer.write("<p>" + msg + "</p>");
  }

  public void link(String href, String caption) throws IOException {
    paragraph("<a href='" + href + "'>" + caption + "</a>");
  }

  public void mailto(String mailaddr, String username) throws IOException {
    link("mailto:" + mailaddr, username);
  }

  public void close() throws IOException {
    writer.write("</body>");
    writer.write("</html>");
    writer.close();
  }
}

# ==================== ID 18 ====================
public class EMval {
  double value;

  public void setValue(double value) {
    this.value = value;
  }
}

# ==================== ID 19 ====================
public class InputParsingException extends IllegalArgumentException {

  public InputParsingException(Object input, Type targetType, Throwable cause) {
    super(
        "Value: " + input + " could not be parsed into an instance of " + targetType.getTypeName(),
        cause);
  }
}

# ==================== ID 20 ====================
public class QueueWithTwoStacks {
  Stack<Integer> stack1 = new Stack<Integer>();
  Stack<Integer> stack2 = new Stack<Integer>();

  public void push(int node) {
    stack1.push(node);
  }

  public int pop() {
    if (!stack2.isEmpty()) {
      return stack2.pop();
    }
    if (!stack1.isEmpty() && stack2.isEmpty()) {
      while (!stack1.isEmpty()) {
        stack2.push(stack1.pop());
      }
      return stack2.pop();
    }
    return -1;
  }
}
