# ==================== ID 1 ====================
public class Accumulator {
  private int sum = 0;

  public int getSum() {
    return sum;
  }

  public void add(int toAdd) {
    sum = sum + toAdd;
  }
}

# ==================== ID 2 ====================
public class bubble_sort {
  public static int[] bubble_sort(int[] a) {
    int temp;
    for (int i = 0; i < a.length; i++) {
      for (int j = 0; j < a.length - i - 1; j++) {
        if (a[j] > a[j + 1]) {
          temp = a[j];
          a[j] = a[j + 1];
          a[j + 1] = temp;
        }
      }
    }
    for (int j2 = 0; j2 < a.length; j2++) {
      System.out.print(a[j2] + "");
    }
    System.out.println("\n\n");
    return a;
  }
}

# ==================== ID 3 ====================
public class AbstractService {
  public Date limparDia(Date dia) {
    Calendar calendar = Calendar.getInstance();
    calendar.setTime(dia);
    calendar.set(Calendar.MILLISECOND, 0);
    calendar.set(Calendar.SECOND, 0);
    calendar.set(Calendar.MINUTE, 0);
    calendar.set(Calendar.HOUR, 0);
    return calendar.getTime();
  }
}

# ==================== ID 4 ====================
public class DbObject {
  String name;
  String description;

  public DbObject() {
    name = "testName";
    description = "testDesc";
  }

  public DbObject(String n, String s) {
    name = n;
    description = s;
  }
}

# ==================== ID 5 ====================
public class Board {
  public final int row_num;
  public final int col_num;
  public final char cells[][];
  public Board(int row_num, int col_num) {
    this.row_num = row_num;
    this.col_num = col_num;
    this.cells = new char[row_num][col_num];
  }
  public void pretty_print() {
    System.out.println();
    System.out.println("-----------------------\n\n");
    System.out.println();
    for (int r = 0; r < row_num; r++) {
      for (int c = 0; c < col_num; c++) {
        System.out.print(cells[r][c]);
      }
      System.out.println();
    }
    System.out.println();
  }
}

# ==================== ID 6 ====================
public class MissingFunctionException extends RuntimeException {

  public MissingFunctionException(String msg) {
    super(msg);
  }
}

# ==================== ID 7 ====================
public class StarWatchOptionResult implements Serializable {
  private int count;

  public int getCount() {
    return count;
  }

  public void setCount(int count) {
    this.count = count;
  }
}

# ==================== ID 8 ====================
public class Auth {
  private static String token;

  public static void setToken(String token) {
    Auth.token = token;
  }

  public static String getToken() {
    return token;
  }
}

# ==================== ID 9 ====================
public final class R {
  public static final String MF_VERSION = "${version}",
      MF_NAME = "mcflux",
      MF_FULL_NAME = "Minecraft-Flux",
      MF_URL = "https://minecraft.curseforge.com/projects/minecraft-flux",
      MF_DEPS = "required-after:fl",
      MF_ACCESS_TOKEN = "65a919ed8de14b019f9f51200635c4d6",
      MF_ENVIRONMENT = "production",
      GUI_FACTORY = "szewek.mcflux.gui.MCFluxGuiFactory",
      PROXY_SERVER = "szewek.mcflux.proxy.ProxyCommon",
      PROXY_CLIENT = "szewek.mcflux.proxy.ProxyClient";

  public static final int MF_GUI_FLUXGEN = 1;

  private R() {}
}

# ==================== ID 10 ====================
abstract class entertainment_device {
  public int device_state;
  public int min_setting;
  public int max_setting;
  public int volume = 0;
  public abstract void btn1Pressed();
  public abstract void btn2Pressed();
  public void device_feedback() {
    if (device_state > max_setting || device_state < min_setting) {
      device_state = min_setting;
    }
    System.out.println("device_state: \n\n" + device_state);
  }
  public void btn3Pressed() {
    volume++;
  }
  public void btn4Pressed() {
    volume++;
  }
}

# ==================== ID 11 ====================
public class SanityCheck {
  public static boolean noEsc(String s) {
    boolean result = true;
    if (s.contains("'")) {
      result = false;
    }
    return result;
  }
}

# ==================== ID 12 ====================
public class MapValueComparator implements Comparator<String> {

  Map<String, Integer> base;

  public MapValueComparator(Map<String, Integer> base) {
    this.base = base;
  }

  public int compare(String a, String b) {
    if (base.get(a) >= base.get(b)) {
      return -1;
    } else {
      return 1;
    }
  }
}

# ==================== ID 13 ====================
public class EmployeeDetails {
  private String name;
  private long salary;
  private String deptName;

  public EmployeeDetails(String name, long salary, String deptName) {
    this.name = name;
    this.salary = salary;
    this.deptName = deptName;
  }

  public String toString() {
    return "EmployeeDetails name: " + name + ", salary: " + salary + ", deptName: " + deptName;
  }
}

# ==================== ID 14 ====================
public class LogUtil {

  private static final boolean debug = true;

  public static void error(Exception e) {
    e.printStackTrace();
  }

  public static void info(String string) {
    if (debug) System.err.println(string);
  }
}

# ==================== ID 15 ====================
public class Leetcode96 {
  public int numTrees(int n) {
    int[] dp = new int[n + 1];
    dp[0] = 1;
    dp[1] = 1;
    for (int i = 2; i < n + 1; i++) {
      for (int j = 1; j < i + 1; j++) {
        dp[i] += dp[j - 1] * dp[i - j];
      }
    }
    return dp[n];
  }
}

# ==================== ID 16 ====================
public class Palabra {
  private final String nombre;
  private final ArrayList<String> definiciones;
  public Palabra(String nombre) {
    this.nombre = nombre;
    definiciones = new ArrayList();
  }
  public void add_def(String def) {
    definiciones.add(def);
  }
  public void delete_def(int index) {
    definiciones.remove(index);
  }
  public void imprimir_def() {
    System.out.println(nombre);
    Iterator lista_def = definiciones.iterator();
    while (lista_def.hasNext()) {
      String def = lista_def.next().toString();
      System.out.println("[\n\n" + definiciones.indexOf(def) + "] \n\n" + def);
    }
  }
}

# ==================== ID 17 ====================
public class Rutas {
  public static String rutaArchivos = "/Users/hatake/Downloads/prueba/";
}

# ==================== ID 18 ====================
public class Util {
  public static native <T> T reinterpret_cast(Object o) {
      return o;
  };
}

# ==================== ID 19 ====================
public class Main {
  public void test_thread() {
    new Thread(
            () -> {
              System.out.println("Hello from thread!\n\n");
            })
        .start();
  }
}

# ==================== ID 20 ====================
public class Test {
  int a = 1 + 1, b = newMethod(), c = 3 - 3;

  private int newMethod() {
    return 2 * 2;
  }
}
