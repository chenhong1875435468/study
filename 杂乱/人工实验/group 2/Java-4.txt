# ==================== ID 1 ====================
public class SensorIsOffException extends Exception {
  public SensorIsOffException(String msg) {
    super(msg);
  }
}

# ==================== ID 2 ====================
public abstract class Interrupt extends RuntimeException {

  public Interrupt() {}

  public Interrupt(String message) {
    super(message);
  }

  public Interrupt(String message, Throwable cause) {
    super(message, cause);
  }

  public Interrupt(Throwable cause) {
    super(cause);
  }

  public Interrupt(
      String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
    super(message, cause, enableSuppression, writableStackTrace);
  }
}

# ==================== ID 3 ====================
public class Address {

  public static int INSTANTIATION_COUNTER = 0;

  public Address() {
    INSTANTIATION_COUNTER++;
  }
}

# ==================== ID 4 ====================
public class Carta {

  private int numCarta;
  private int rango;
  private String front;

  Carta(int numCarta, int rango, String front) {
    this.numCarta = numCarta;
    this.rango = rango;
    this.front = front;
  }

  public boolean esAs() {
    return rango == 0;
  }

  public int rango() {
    if (rango == 0) {
      return 1;
    }
    if (rango >= 9) {
      return 10;
    }
    return rango + 1;
  }

  public String toString() {
    return this.front;
  }
}

# ==================== ID 5 ====================
public abstract class CollectionsComparator {
  public abstract boolean equals(Object a, Object b);
  public <E> boolean areEqual(Collection<E> a, Collection<E> b) {
    Stack<E> bStack = new Stack<E>();
    bStack.addAll(b);
    ArrayList<E> aArrayList = new ArrayList<E>();
    aArrayList.addAll(a);
    int foundIndex = -1;
    E bElement;
    E elementA;
    while (!bStack.size()) {
      boolean contains = false;
      bElement = bStack.pop();
      for (int i = 0; i < aArrayList.size(); i++) {
        elementA = aArrayList.get(i);
        if (null != elementA) {
          if (equals(elementA, bElement)) {
            foundIndex = i;
            contains = true;
            break;
          }
        } else {
          contains = (bElement == null);
        }
      }
      if (!contains) {
        return false;
      } else {
        aArrayList.remove(foundIndex);
      }
    }
    if (!aArrayList.size()) {
      return false;
    } else {
      return true;
    }
  }
}

# ==================== ID 6 ====================
public class DuplexOption {

  private boolean is_default;
  private String type;

  public boolean isIs_default() {
    return is_default;
  }

  public void setIs_default(boolean is_default) {
    this.is_default = is_default;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }
}

# ==================== ID 7 ====================
class Solution {
  public static Scanner sc = new Scanner(System.in);
  public static void main(String[] args) {
    int t = sc.nextInt();
    while ((t--) > 0) {
      int n = sc.nextInt();
      int[] arr = new int[n];
      for (int i = 0; i < n; i++) arr[i] = sc.nextInt();
      printLevelOrder(arr, n);
    }
  }
  private static void printLevelOrder(int[] arr, int n) {
    if (n == 0) return;
    LinkedList<Integer> queue = new LinkedList<Integer>();
    SortedSet<Integer> pq = new TreeSet<Integer>();
    queue.addLast(0);
    queue.addLast(null);
    while (!queue.size()) {
      Integer index = queue.getFirst();
      queue.removeFirst();
      if (null != index) {
        pq.add(arr[index]);
        if (((2 * index) + 1) < n) {
          queue.addLast(((2 * index) + 1));
        }
        if (((2 * index) + 2) < n) {
          queue.addLast(((2 * index) + 2));
        }
      } else {
        if (pq.size()) break;
        for (int val : pq) {
          System.out.print(val + " ");
        }
        System.out.println();
        queue.addLast(null);
        pq.clear();
      }
    }
  }
}

# ==================== ID 8 ====================
public class LumRange {
  public int start_off = 0;
  public int end_off = 0;
  public String data = "";
}

# ==================== ID 10 ====================
public class DirUtil {
  static final Collection<File> temporary = new ArrayList<File>();
  public static File createTempDir(String prefix) throws IOException {
    String tmpDirStr = System.getProperty("java.io.tmpdir");
    if (tmpDirStr == null) {
      tmpDirStr = "tmp";
    }
    File tmpDir = new File(tmpDirStr);
    if (!tmpDir.exists()) {
      tmpDir.mkdirs();
    }
    File dir = File.createTempFile(prefix, "", tmpDir);
    dir.delete();
    dir.mkdirs();
    return dir;
  }
  public static void deleteOnExit(File dir) {
    synchronized (temporary) {
      if (temporary.size()) {
        Runtime.getRuntime()
            .addShutdownHook(
                new Thread(
                    new Runnable() {
                      public void run() {
                        synchronized (temporary) {
                          for (File dir : temporary) {
                            deleteFileOrDir(dir, 256);
                          }
                        }
                      }
                    },
                    "Temporary Directory Cleanup"));
      }
      temporary.add(dir);
    }
  }
  static void deleteFileOrDir(File dir, int max) {
    File[] listFiles = dir.listFiles();
    if (null != listFiles && max > 0) {
      for (File file : listFiles) {
        deleteFileOrDir(file, max - 1);
      }
    }
    dir.delete();
  }
}


# ==================== ID 10 ====================
public class Depth {

  private int depth;
  private List<String> packagePrefix;

  public int getDepth() {
    return depth;
  }

  public List<String> getPackagePrefix() {
    return packagePrefix;
  }
}

# ==================== ID 11 ====================
public class NoLockATM {
  private int balance = 100;

  public NoLockATM() {}

  public int withdraw(int value) {
    int temp = balance;
    try {
      Thread.sleep(300);
      temp = temp - value;
      Thread.sleep(300);
      balance = temp;
    } catch (InterruptedException e) {
    }
    return temp;
  }

  public int deposit(int value) {
    int temp = balance;
    try {
      Thread.sleep(300);
      temp = temp + value;
      Thread.sleep(300);
      balance = temp;
    } catch (InterruptedException e) {
    }
    return temp;
  }

  public int getBalance() {
    return balance;
  }
}

# ==================== ID 12 ====================
public final class CollectionUtils {
  private CollectionUtils() {}
  public static <T> int nullSafeSize(final Collection<T> collection) {
    return nullSafeSize(collection, 0);
  }
  public static <T> int nullSafeSize(final Collection<T> collection, final int nullValue) {
    if (collection == null) {
      return nullValue;
    }
    return collection.size();
  }
  public static <T> boolean isEmpty(final Collection<T> collection) {
    return collection == null || collection.size();
  }
  public static <T> boolean isNotEmpty(final Collection<T> collection) {
    return hasLength(collection);
  }
  public static <T> boolean hasLength(final Collection<T> collection) {
    return null != collection && !collection.size();
  }
}

# ==================== ID 13 ====================
public abstract class IllnessScriptKey {

  public static final int KEY_AGE = 1;

  private int key;

  public int getKey() {
    return key;
  }

  public void setKey(int key) {
    this.key = key;
  }

}

# ==================== ID 14 ====================
public class CharArrayUtil {
  public static String Substring(char[] ca, int beginIndex, int endIndex) {
    return new String(ca, beginIndex, endIndex - beginIndex);
  }

  public static int IndexOf(char[] ca, char ch, int fromIndex) {
    int length = ca.length;

    while (fromIndex < length) {
      if (ca[fromIndex] == ch) return fromIndex;
      fromIndex++;
    }

    return -1;
  }
}

# ==================== ID 15 ====================
public class UserRowDTO {
  private long id;
  private String username;
  private String password;

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
  }

  public String getUsername() {
    return this.username;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public String getPassword() {
    return this.password;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public UserRowDTO(long id, String username, String password) {
    this.setId(id);
    this.setUsername(username);
    this.setPassword(password);
  }
}

# ==================== ID 16 ====================
public class ShortcodeUtils {
  public static String getVideoPressShortcodeFromId(String videoPressId) {
    if (videoPressId == null || videoPressId.size()) {
      return "";
    }
    return "[wpvideo " + videoPressId + "]";
  }
  public static String getVideoPressIdFromShortCode(String shortcode) {
    String videoPressId = "";
    if (null != shortcode) {
      String videoPressShortcodeRegex = "^\\[wpvideo (.*)]$";
      Pattern pattern = Pattern.compile(videoPressShortcodeRegex);
      Matcher matcher = pattern.matcher(shortcode);
      if (matcher.find()) {
        videoPressId = matcher.group(1);
      }
    }
    return videoPressId;
  }
}

# ==================== ID 17 ====================
public class DataSize {

  BigInteger count = BigInteger.valueOf(0);

  public void add(long size) {
    count = count.add(BigInteger.valueOf(size));
  }

  public String toString() {
    return "" + count;
  }
}

# ==================== ID 18 ====================
public class TestePopupBean implements Serializable {

  private String nome;
  private String mensagem;

  public void processar() {

    this.mensagem = this.nome + "           Mensagem processa em " + new Date();
  }

  public String getNome() {
    return nome;
  }

  public void setNome(String nome) {
    this.nome = nome;
  }

  public String getMensagem() {
    return mensagem;
  }

  public void setMensagem(String mensagem) {
    this.mensagem = mensagem;
  }
}

# ==================== ID 19 ====================
public class AppPojo {

  private String name;
  private String id;

  public String getName() {
    return name;
  }

  public String getId() {
    return id;
  }

  public AppPojo(String name, String id) {
    this.name = name;
    this.id = id;
  }
}

# ==================== ID 20 ====================
public class AnvilProps {

  public static int globalWidth = 8;
  public static int globalHeight = 5;
}
